Install Scala sbt ( with PPA )

1. install java 8 jdk, for ubuntu 
	$ sudo apt install -y openjdk-8-jdk

2. Scala sbt
	$ echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
	$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
	$ sudo apt update
	$ sudo apt install sbt
	( source : https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Linux.html )

3. Interger Set Library
	$ sudo apt install pkg-config libgmp3-dev libisl-dev
    # for Zynq devices
        $ sudo apt install libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi libncurses5-dev g++-arm-linux-gnueabihf
    # for Ultrascale
        $ sudo apt install g++-aarch64-linux-gnu

4. install Xilinx Vivado Webpack ( and have a cup of tea ... , it takes around 30 min )
    # Assume that you installed the path to {XilinxPath}, The Installed version is {XilinxVer} ( such as 2017.1, as needed in Issue #2 )

5. set Java Options ( See Issue #1 )
    $ export JAVA_OPTS="-Xmx4G -Xss1024k -Xms1G"

6. $ git clone https://github.com/stanford-ppl/spatial.git
7. $ cp spatial
    # This current path will be further set as {spatialPath}
8. $ make install
    # Note in document, emptiness will show up in home diirectory, however it seems not so, no errors till now. -- 2019/02/15

9. Add Xilinx bin to PATH
    export PATH=$PATH:{XilinxPath}/Vivado/{XilinxVer}/bin:{XilinxPath}/SDK/{XilinxVer}/bin

10. to build a app
    # run the command in the spatial Path
    $ bin/spatial <app name> --synth --fpga=ZedBoard
        # fpga
            ZCU: for Ultrascale
    $ cd gen/<app name> && make
        # this may take a long time
 
# Issues and Fixes
	1 Java output of memory issues
		export JAVA_OPTS="-Xmx4G -Xss1024k -Xms1G"

    2 make failed on Zedboard
        Install Xilinx 2017.1 ( noted in 2019/2/17 )

    3 for zedboard, during make in the gen/<app name> @make sw, the script fails
        3-1 the makefile tried to copy script/zedboard.mk to cpp, where the generated script shall be zedboard.make
        3-2 the script is using g++ version 4.8 for cross compiling, if you are not using the coressponding version, you need to mod the script name
        3-3 TopHost.cpp:18:10: fatal error: FringeContext.h: No such file or directory
            The included source is zynq.sw-resources, while compiling with zedboard, shall be zedboard.sw-resources

            # $ cat scripts/zedboard.make                               --- ISSUE 3-1
                # CC=g++-4.8                                            --- ISSUE 3-2
                # LINK=g++-4.8                                          --- ISSUE 3-2
                # CROSS_COMPILE=/usr/bin/arm-linux-gnueabihf-
                #
                # FRINGE_SRC=../zynq.sw-resources                       --- ISSUE 3-3
                #
                # ... ( latter part of the code omitted ) ...

# install Petalinux SDK
    1 install dependencies
        $ sudo apt install -y
            gawk chrpath socat autoconf \
            libtool texinfo zlib1g-dev gcc-multilib \
            libsdl1.2-dev libglib2.0-dev openssl zlib1g:i386 xvfb libssl-dev
	2. get the corresponding version of petalinux ( the version shall be same as vivado, in the following part, 2017.1 is used )
	3. get the BSP for your device
	4. bash petalinux-v2017.1-final-installer.run /path/to/install
	5. cd to petalinux install path
	6. $ petalinux-create --type project --name {project name} -s { BSP file name }
	7. cd to {project name}
	8. petalinux-config ( this may output error around webtalk, just ignore the error for now )
	9. petalinux-config -c rootfs ( choose any tools you want along the line )
	10. petalinux build ( this takes around 8-15 min )
	11. petalinux-package --boot --force --fsbl ./images/linux/zynq_fsbl.elf --fpga ./images/linux/download.bit --u-boot ( this creates BOOT.BIN image.ub rootfs.cpio )
	12. create two partitions, first as fat ( ~1G ) and the latter ext4
	13. move BOOT.BIN image.ub to the fat partition, and rootfs.cpio to the ext4 partition
	14. set the jumpers according to FPGA board, and boot to linux console